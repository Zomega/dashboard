// Generated by CoffeeScript 1.6.1

/* About
*/


/* License and Warranty
*/


(function() {

  $(function() {
    var Slide, SlideShow, a1, addClass, byId, ctr, doc, next, query, queryAll, removeClass, slideshow, spaces, strToArray, toArray, trim;
    doc = document;
    ctr = 0;
    spaces = /\s+/;
    a1 = [""];
    toArray = function(list) {
      return Array.prototype.slice.call(list || [], 0);
    };
    byId = function(id) {
      if (typeof id === "string") {
        return doc.getElementById(id);
      }
      return id;
    };
    query = function(query, root) {
      return queryAll(query, root)[0];
    };
    queryAll = function(query, root) {
      var rootIsDoc;
      if (!query) {
        return [];
      }
      if (typeof query !== "string") {
        return toArray(query);
      }
      if (typeof root === "string") {
        root = byId(root);
        if (!root) {
          return [];
        }
      }
      root = root || document;
      rootIsDoc = root.nodeType === 9;
      doc = (rootIsDoc ? root : root.ownerDocument || document);
      if (!rootIsDoc || (">~+".indexOf(query.charAt(0)) >= 0)) {
        root.id = root.id || ("qUnique" + (ctr++));
        query = "#" + root.id + " " + query;
      }
      if (">~+".indexOf(query.slice(-1)) >= 0) {
        query += " *";
      }
      return toArray(doc.querySelectorAll(query));
    };
    strToArray = function(s) {
      if (typeof s === "string" || s instanceof String) {
        if (s.indexOf(" ") < 0) {
          a1[0] = s;
          return a1;
        } else {
          return s.split(spaces);
        }
      }
      return s;
    };
    trim = function(str) {
      return str.replace(/^\s\s*/, "").replace(/\s\s*$/, "");
    };
    addClass = function(node, classStr) {
      var c, cls, i, len;
      classStr = strToArray(classStr);
      cls = " " + node.className + " ";
      i = 0;
      len = classStr.length;
      c = void 0;
      while (i < len) {
        c = classStr[i];
        if (c && cls.indexOf(" " + c + " ") < 0) {
          cls += c + " ";
        }
        ++i;
      }
      return node.className = trim(cls);
    };
    removeClass = function(node, classStr) {
      var cls, i, len;
      cls = void 0;
      if (classStr !== undefined) {
        classStr = strToArray(classStr);
        cls = " " + node.className + " ";
        i = 0;
        len = classStr.length;
        while (i < len) {
          cls = cls.replace(" " + classStr[i] + " ", " ");
          ++i;
        }
        cls = trim(cls);
      } else {
        cls = "";
      }
      if (node.className !== cls) {
        return node.className = cls;
      }
    };
    Slide = function(name) {
      this._name = name;
      return addClass(this._name, "slide waiting");
    };
    Slide.prototype = {
      _name: null,
      _states: ["previous", "current", "next", "waiting"],
      setState: function(state) {
        removeClass(this._name, this._states);
        return addClass(this._name, state);
      }
    };
    SlideShow = function(slides) {
      var _t;
      this.slides = (slides || []).map(function(el) {
        return new Slide(el);
      });
      _t = this;
      document.addEventListener("keydown", (function(e) {
        return _t.handleKeys(e);
      }), false);
      return this.update();
    };
    SlideShow.prototype = {
      slides: [],
      update: function() {
        var i;
        i = 0;
        while (i < this.slides.length) {
          this.slides[i].setState("waiting");
          i++;
        }
        this.slides[this.slides.length - 1].setState("previous");
        this.slides[1].setState("next");
        return this.slides[0].setState("current");
      },
      next: function() {
        this.slides.push(this.slides.shift());
        return this.update();
      },
      prev: function() {
        this.slides.unshift(this.slides.pop());
        return this.update();
      },
      handleKeys: function(e) {
        switch (e.keyCode) {
          case 37:
            return this.prev();
          case 39:
            return this.next();
        }
      }
    };
    slideshow = new SlideShow(queryAll('.slide'));
    next = function() {
      slideshow.next();
      return setTimeout(arguments.callee, 15000);
    };
    return next();
  });

}).call(this);
